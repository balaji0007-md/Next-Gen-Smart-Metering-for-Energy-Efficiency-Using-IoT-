pip install paho-mqtt
pip install AWSIoTPythonSDK
import time
import json
from AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient

# Configuration parameters
client_id = "SmartMeter"
endpoint = "your-iot-endpoint.amazonaws.com"
root_ca_path = "path/to/AmazonRootCA1.pem"
certificate_path = "path/to/your-certificate.pem.crt"
private_key_path = "path/to/your-private.pem.key"
topic = "smart_meter/data"

# Initialize the MQTT client
mqtt_client = AWSIoTMQTTClient(client_id)
mqtt_client.configureEndpoint(endpoint, 8883)
mqtt_client.configureCredentials(root_ca_path, private_key_path, certificate_path)

# AWS IoT Core configuration
mqtt_client.configureAutoReconnectBackoffTime(1, 32, 20)
mqtt_client.configureOfflinePublishQueueing(-1)
mqtt_client.configureDrainingFrequency(2)
mqtt_client.configureConnectDisconnectTimeout(10)
mqtt_client.configureMQTTOperationTimeout(5)

# Connect to AWS IoT Core
mqtt_client.connect()

def get_meter_data():
    # Simulated function to get smart meter data
    data = {
        "timestamp": int(time.time()),
        "energy_consumption": 123.45,  # in kWh
        "voltage": 230.0,  # in volts
        "current": 5.0,  # in amperes
        "power_factor": 0.95
    }
    return data

# Publish data to the cloud
while True:
    meter_data = get_meter_data()
    mqtt_client.publish(topic, json.dumps(meter_data), 1)
    print(f"Published data: {meter_data}")
    time.sleep(10)  # Send data every 10 seconds

WEB SERVER TO RECIEVE DATA:

pip install Flask
from flask import Flask, request, jsonify
import json
import time
from AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient

app = Flask(__name__)

# AWS IoT Core configuration parameters
client_id = "SmartMeter"
endpoint = "your-iot-endpoint.amazonaws.com"
root_ca_path = "path/to/AmazonRootCA1.pem"
certificate_path = "path/to/your-certificate.pem.crt"
private_key_path = "path/to/your-private.pem.key"
topic = "smart_meter/data"

# Initialize the MQTT client
mqtt_client = AWSIoTMQTTClient(client_id)
mqtt_client.configureEndpoint(endpoint, 8883)
mqtt_client.configureCredentials(root_ca_path, private_key_path, certificate_path)

# AWS IoT Core configuration
mqtt_client.configureAutoReconnectBackoffTime(1, 32, 20)
mqtt_client.configureOfflinePublishQueueing(-1)
mqtt_client.configureDrainingFrequency(2)
mqtt_client.configureConnectDisconnectTimeout(10)
mqtt_client.configureMQTTOperationTimeout(5)

# Connect to AWS IoT Core
mqtt_client.connect()

@app.route('/send-data', methods=['POST'])
def send_data():
    data = request.json
    mqtt_client.publish(topic, json.dumps(data), 1)
    return jsonify({"message": "Data published to AWS IoT Core"}), 200

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)


RUNNING AND ESTABLISHING:

python your_flask_app.py
import requests

url = "http://your_server_ip:5000/send-data"
data = {
    "timestamp": int(time.time()),
    "energy_consumption": 123.45,
    "voltage": 230.0,
    "current": 5.0,
    "power_factor": 0.95
}

response = requests.post(url, json=data)
print(response.json())
